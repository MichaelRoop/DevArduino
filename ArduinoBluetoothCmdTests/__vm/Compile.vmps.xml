<VisualMicro>
  <Program Name="ArduinoBluetoothCmdTests" Ext=".ino" Location="D:\Dev\Arduino\ArduinoBluetoothCmdTests">
    <Compile ReCompileIfSourceIsNewer="1" IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Release" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\Michael\AppData\Local\Temp\VMBuilds\ArduinoBluetoothCmdTests\uno\Release" ExportWebDebugger="0" SketchName="ArduinoBluetoothCmdTests" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DBT_HARDWARESERIAL 0;VM_DBT_SOFTWARESERIAL 1;VM_DBT_FASTSERIAL 2;VM_DBT_USB 3;VM_DBT_TEENSY 4;VM_DBT_UART 5;VM_DBT_USART 6;VM_DBT_USBSERIAL 7;VM_DBT_TTYUART 8;VM_DBT_NET_CONSOLE 9;VM_DBT_Uart 10;VM_DBT_COSA 11;VM_DBT_CDCSerialClass 12;VM_DBT_HARDWARESERIAL1 13;VM_DBT_HARDWARESERIAL2 14;VM_DBT_HARDWARESERIAL3 15;VM_DBT_NET_UDP 16;VM_DBT_USBAPI 17;VM_DBT_SERIALUSB 18;VM_DBT_MS430_SERIAL_ 19;VM_DBT_NO_SERIAL 20;VM_DBT_GENERIC_OBJECT 21;VM_DEBUG_ENABLE 1;VM_DEBUG;VM_DEBUGGER_SOFT_TRANSPORT Serial;VM_DEBUGGER_SOFT_TRANSPORT_WRITER Serial;VM_DBT VM_DBT_GENERIC_OBJECT;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="7.3.0-atmel3.6.1-arduino5">
      <Board CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\Michael\Documents\Arduino" name="Arduino Uno" vid.0="0x2341" pid.0="0x0043" vid.1="0x2341" pid.1="0x0001" vid.2="0x2A03" pid.2="0x0043" vid.3="0x2341" pid.3="0x0243" upload.tool="avrdude" upload.protocol="arduino" upload.maximum_size="32256" upload.maximum_data_size="2048" upload.speed="115200" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.high_fuses="0xDE" bootloader.extended_fuses="0xFD" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" bootloader.file="optiboot/optiboot_atmega328.hex" build.mcu="atmega328p" build.f_cpu="16000000L" build.board="AVR_UNO" build.core="arduino" build.variant="standard" runtime.os="windows" runtime.ide.path="C:\Program Files (x86)\Arduino" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="108011" target_package="arduino" target_platform="avr" runtime.hardware.path="C:\Program Files (x86)\Arduino\hardware\arduino" originalid="uno" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}\lib\gcc\avr\7.3.0\include;{intellisense.tools.path}avr\include;{intellisense.tools.path}\lib\gcc\avr\7.3.0\include;{intellisense.tools.path}avr\include-fixed;{intellisense.tools.path}avr\include\avr;{intellisense.tools.path}lib\gcc\avr\4.8.1\include;{intellisense.tools.path}lib\gcc\avr\4.9.2\include;{intellisense.tools.path}lib\gcc\avr\4.9.3\include;{vm.intellisense.add-paths}" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" ide.compiler_flags_no_opt="-Og" tools.gdbstub.cmd="avr-gdb.exe" tools.gdbstub.path="{runtime.tools.avr-gcc.path}/bin" tools.gdbstub.alternative.path="Micro Platforms/visualmicro/tools/avr-gdb/7.3.0-atmel3.6.1-arduino5" tools.gdbstub.debug.args="&quot;{{{build.path}/{build.project_name}.elf}}&quot; -ex &quot;target remote \\.\{serial.debug.port}&quot;" tools.gdbstub.showLocalSerialPort="true" debug_menu.hwdebugger.gdbstub="GDB Stub" debug_menu.hwdebugger.gdbstub.debug.tool="gdbstub" meta_gdbstub.sentence="This debugger requires the avr-debugger library (by Jan Dolinay) be included in the project (install via Library Manager or from GitHub)." meta_gdbstub.comment="To use this debugger, install 'avr-debugger' library, add 1) '#include &lt;avr8-stub.h&gt;'  2) add 'debug_init();' to the 'setup()', and add 'breakpoint();' to the top of 'loop()'. Set vMicro &gt; Debugger &gt; 'Compiler Optimization' to 'No Project', 'No Project + Libraries' or 'None' when debugging (NOTE: This might cause compilation errors with certain code such as HardwareSerial.)" meta_gdbstub.image.connect="https://www.visualmicro.com/pics/Debug-Help-Uno_USBOnly.png" meta_gdbstub.image.operation="https://www.visualmicro.com/pics/Debug-Break-Uno-GDBStub-VSOnly.png" meta_gdbstub.reference.usage.url="https://www.visualmicro.com/page/User-Guide.aspx?doc=Arduino-gdb-Tutorial.html" version="1.8.2" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} &quot;-P{serial.port}&quot; -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.upload.network_pattern="&quot;{network_cmd}&quot; -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" upload.verify="" tools.vmopenocd.cmd="bin/openocd.exe" tools.vmopenocd.cmd.windows="bin/openocd.exe" tools.vmopenocd.debug.params.verbose="-d2" tools.vmopenocd.debug.params.quiet="-d0" tools.vmopenocd.debug.address="localhost:3333" tools.vmopenocd.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.vmopenocd.scriptPath="-s &quot;{path}/scripts/&quot;" tools.vmopenocd.logging="-l &quot;{{build.path}/{build.project_name}_DebugOpenOCD.log}&quot;" tools.vmopenocd.boardCmd="" tools.vmopenocd.targetCmd="" tools.vmopenocd.initCmd="" tools.vmopenocd.debug.pattern="&quot;{path}/{cmd}&quot; {debug.verbose} {logging} {scriptPath} {boardCmd} {targetCmd} {initCmd}" tools.vmopenocd.program.cmd="bin/openocd.exe" tools.vmopenocd.program.cmd.windows="bin/openocd.exe" tools.vmopenocd.program.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.vmopenocd.program.address="localhost:3333" tools.vmopenocd.program.params.verbose="-d2" tools.vmopenocd.program.params.quiet="-d0" tools.vmopenocd.program.elf.message="****[vMicro]**** Uploading ELF :" tools.vmopenocd.program.pattern="&quot;{path}/{cmd}&quot; {program.verbose} {scriptPath} {boardCmd} {targetCmd} -c &quot;echo -n {{program.elf.message}}&quot; {programCmd}" tools.atmelICE.protocol="" tools.atmelICE.debug.cmd="arm-none-eabi-gdb.exe" tools.atmelICE.debug.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.atmelICE.debug.pattern="&quot;{path}/{cmd}&quot;" tools.atmelICE.server.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.atmelICE.server.initCmd="-c &quot;init&quot;" tools.atmelICE.server.boardCmd="-c &quot;adapter driver cmsis-dap&quot; -c &quot;cmsis_dap_vid_pid 0x03eb 0x2141&quot;" tools.atmelICE.server.tool="vmopenocd" tools.atmelICE.debug.server="vmopenocd" tools.atmelICE.program.scriptPath="-s &quot;{program.path}/scripts/&quot;" tools.atmelICE.program.boardCmd="-c &quot;adapter driver cmsis-dap&quot; -c &quot;cmsis_dap_vid_pid 0x03eb 0x2141&quot;" tools.atmelICE.program.cmd="bin/openocd.exe" tools.atmelICE.program.cmd.windows="bin/openocd.exe" tools.atmelICE.program.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.atmelICE.program.address="localhost:3333" tools.atmelICE.program.params.verbose="-d2" tools.atmelICE.program.params.quiet="-d0" tools.atmelICE.program.elf.message="****[vMicro]**** Uploading ELF :" tools.atmelICE.program.pattern="&quot;{program.path}/{program.cmd}&quot; {program.verbose} {program.scriptPath} {program.boardCmd} {program.targetCmd} -c &quot;echo -n {{program.elf.message}}&quot; {program.programCmd}" tools.atmelICE.program.extra_params="" tools.atmelICE.program.protocol="" tools.atmelICE.erase.params.verbose="-d3" tools.atmelICE.erase.params.quiet="-d0" tools.atmelICE.erase.pattern="" tools.jlink.cmd="arm-none-eabi-gdb.exe" tools.jlink.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.jlink.pattern="&quot;{path}/{cmd}&quot;" tools.jlink.server.tool="vmopenocd" tools.jlink.debug.server="vmopenocd" tools.jlink.server.boardCmd="-f &quot;interface/jlink.cfg&quot;" tools.jlink.server.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.jlink.server.initCmd="-c &quot;init&quot;" tools.jlink.program.scriptPath="-s &quot;{program.path}/scripts/&quot;" tools.jlink.program.boardCmd="-f &quot;interface/jlink.cfg&quot;" tools.jlink.program.cmd="bin/openocd.exe" tools.jlink.program.cmd.windows="bin/openocd.exe" tools.jlink.program.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.jlink.program.address="localhost:3333" tools.jlink.program.params.verbose="-d2" tools.jlink.program.params.quiet="-d0" tools.jlink.program.elf.message="****[vMicro]**** Uploading ELF :" tools.jlink.program.pattern="&quot;{program.path}/{program.cmd}&quot; {program.verbose} {program.scriptPath} {program.boardCmd} {program.targetCmd} -c &quot;echo -n {{program.elf.message}}&quot; {program.programCmd}" tools.jlink.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.jlink.upload.boardCmd="-f &quot;interface/jlink.cfg&quot;" tools.jlink.upload.cmd="bin/openocd.exe" tools.jlink.upload.cmd.windows="bin/openocd.exe" tools.jlink.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.jlink.upload.address="localhost:3333" tools.jlink.upload.params.verbose="-d2" tools.jlink.upload.params.quiet="-d0" tools.jlink.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.jlink.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.bmp_upload.cmd="arm-none-eabi-gdb.exe" tools.bmp_upload.debug.path="{runtime.tools.arm-none-eabi-gcc.path}/bin/" tools.bmp_upload.program.cmd="bin/arm-none-eabi-gdb.exe" tools.bmp_upload.program.cmd.windows="bin/arm-none-eabi-gdb.exe" tools.bmp_upload.program.path="{runtime.tools.arm-none-eabi-gcc.path}" tools.bmp_upload.upload.cmd="bin/arm-none-eabi-gdb.exe" tools.bmp_upload.upload.cmd.windows="bin/arm-none-eabi-gdb.exe" tools.bmp_upload.upload.path="{runtime.tools.arm-none-eabi-gcc.path}" tools.bmp_upload.server.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.bmp_upload.server.initCmd="-c &quot;init&quot;" tools.bmp_upload.showLocalSerialPort="true" tools.bmp_upload.debug.server="" tools.stlinkv2.description="" tools.stlinkv2.cmd="arm-none-eabi-gdb.exe" tools.stlinkv2.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.stlinkv2.pattern="&quot;{path}/{cmd}&quot;" tools.stlinkv2.server.tool="vmopenocd" tools.stlinkv2.debug.server="vmopenocd" tools.stlinkv2.server.boardCmd="-f &quot;interface/stlink.cfg&quot;" tools.stlinkv2.server.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.stlinkv2.server.initCmd="-c &quot;init&quot;" tools.stlinkv2.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.stlinkv2.upload.boardCmd="-f &quot;interface/stlink.cfg&quot;" tools.stlinkv2.upload.cmd="bin/openocd.exe" tools.stlinkv2.upload.cmd.windows="bin/openocd.exe" tools.stlinkv2.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.stlinkv2.upload.address="localhost:3333" tools.stlinkv2.upload.params.verbose="-d2" tools.stlinkv2.upload.params.quiet="-d0" tools.stlinkv2.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.stlinkv2.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.stlinkv2.upload.extra_params="" tools.stlinkv2.upload.protocol="" tools.stlinkv2.protocol="" tools.f2232mm.cmd="arm-none-eabi-gdb.exe" tools.f2232mm.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.f2232mm.pattern="&quot;{path}/{cmd}&quot; {args}" tools.f2232mm.server.tool="vmopenocd" tools.f2232mm.debug.server="vmopenocd" tools.f2232mm.server.boardCmd="-f &quot;interface/ftdi/minimodule.cfg&quot;" tools.f2232mm.server.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.f2232mm.server.initCmd="-c &quot;init&quot;" tools.f2232mm.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.f2232mm.upload.boardCmd="-f &quot;interface/ftdi/minimodule.cfg&quot;" tools.f2232mm.upload.cmd="bin/openocd.exe" tools.f2232mm.upload.cmd.windows="bin/openocd.exe" tools.f2232mm.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.f2232mm.upload.address="localhost:3333" tools.f2232mm.upload.params.verbose="-d2" tools.f2232mm.upload.params.quiet="-d0" tools.f2232mm.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.f2232mm.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.f2232mm.upload.extra_params="" tools.f2232mm.upload.protocol="" tools.f2232mm.protocol="" tools.f2232h.server.boardCmd="-f &quot;interface/ftdi/minimodule-lowcost.cfg&quot;" tools.f2232h.cmd="arm-none-eabi-gdb.exe" tools.f2232h.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.f2232h.pattern="&quot;{path}/{cmd}&quot;" tools.f2232h.server.tool="vmopenocd" tools.f2232h.debug.server="vmopenocd" tools.f2232h.server.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.f2232h.server.initCmd="-c &quot;init&quot;" tools.f2232h.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.f2232h.upload.boardCmd="-f &quot;interface/ftdi/minimodule-lowcost.cfg&quot;" tools.f2232h.upload.cmd="bin/openocd.exe" tools.f2232h.upload.cmd.windows="bin/openocd.exe" tools.f2232h.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.f2232h.upload.address="localhost:3333" tools.f2232h.upload.params.verbose="-d2" tools.f2232h.upload.params.quiet="-d0" tools.f2232h.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.f2232h.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.f2232h.upload.extra_params="" tools.f2232h.upload.protocol="" tools.f2232h.protocol="" vm.platform.root.path="c:\program files\microsoft visual studio\2022\preview\common7\ide\extensions\kce0oyko.t4k\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" arduinoasispatmega32u4.name="Arduino as ISP (ATmega32U4)" arduinoasispatmega32u4.communication="serial" arduinoasispatmega32u4.protocol="arduino" arduinoasispatmega32u4.speed="19200" arduinoasispatmega32u4.program.protocol="arduino" arduinoasispatmega32u4.program.speed="19200" arduinoasispatmega32u4.program.tool="avrdude" arduinoasispatmega32u4.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" jtag3isp.name="Atmel JTAGICE3 (ISP mode)" jtag3isp.communication="usb" jtag3isp.protocol="jtag3isp" jtag3isp.program.protocol="jtag3isp" jtag3isp.program.tool="avrdude" jtag3isp.program.extra_params="" jtag3.name="Atmel JTAGICE3 (JTAG mode)" jtag3.communication="usb" jtag3.protocol="jtag3" jtag3.program.protocol="jtag3" jtag3.program.tool="avrdude" jtag3.program.extra_params="-B0.1" atmel_ice.name="Atmel-ICE (AVR)" atmel_ice.communication="usb" atmel_ice.protocol="atmelice_isp" atmel_ice.program.protocol="atmelice_isp" atmel_ice.program.tool="avrdude" atmel_ice.program.extra_params="-Pusb" runtime.tools.avr-gcc.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5" runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5" runtime.tools.avrdude.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\avrdude\6.3.0-arduino17" runtime.tools.avrdude-6.3.0-arduino17.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\avrdude\6.3.0-arduino17" runtime.tools.arduinoOTA.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\arduinoOTA\1.3.0" runtime.tools.arduinoOTA-1.3.0.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\arduinoOTA\1.3.0" runtime.tools.arm-none-eabi-gcc.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.bossac.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.tools.bossac-1.6.1-arduino.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.vm.boardinfo.id="uno" runtime.vm.boardinfo.name="uno" runtime.vm.boardinfo.desc="Arduino Uno" runtime.vm.boardinfo.src_location="C:\Program Files (x86)\Arduino\hardware\arduino\avr" ide.hint="Use installed IDE (hardware, reference/help + libraries)" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.8.13" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.recipe.preproc.defines.flags="-w -x c++ -E -dM" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="https://www.visualmicro.com/page/Download-Arduino-Or-Other-Supporting-IDEs.aspx" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" runtime.tools.vm_web_debugger.path="{vm.platform.root.path}/../../Micro Debuggers/WebDebugger" recipe.hooks.vmdeploy.vm_web_debugger_postupload.1.pattern="&quot;{runtime.tools.vm_web_debugger.path}/DeployMicroWebserver.exe&quot; &quot;{sketch_path}&quot; &quot;{serial.port}&quot; &quot;{runtime.hardware.path}\..&quot;" recipe.hooks.vmlaunch.vm_web_debugger_preopen.1.pattern="notepad.exe &quot;{sketch_path}\__vm\vmWebDebugger\Start-WebServer.bat&quot;" recipe.hooks.vmlaunch.vm_web_debugger_preopen.2.pattern="{sketch_path}\__vm\vmWebDebugger\Start-WebServer.bat" ide.debug_menu.debugger_type="Debug" ide.debug_menu.debugger_type.none="Off" ide.debug_menu.none.debug.tool="no_debug" ide.debug_menu.debugger_type.universal="Serial" ide.debug_menu.universal.debug.tool="universal" ide.debug_menu.debugger_type.hwdebugger="Hardware" ide.debug_menu.hwdebugger="Debugger" ide.debug_menu.hwdebugger.custom_debugger="Manual/Custom" ide.debug_menu.hwdebugger.custom_debugger.debug.tool="dbg_external" ide.meta_custom_debugger.sentence="Provides a build that includes debug defines and will launch a custom debugger if one is provided." ide.meta_custom_debugger.paragraph="This is option is for advanced use. It is recommended that a pre-configured debugger be selected when available in this list. Usage: Optionally add a customer debugger to the project. A 'debugger_launch.json' file shares the same command syntax that is used by the VsCode debugger. Custom debuggers can be targeted at a board and/or variant and/or configuration name. IE: [variant].[configuration_name][.]debugger_launch.json" ide.meta_custom_debugger.reference.usage.url="https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md#customlaunchsetupcommands" ide.meta_custom_debugger.reference.connect.url="https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019" ide.debug_menu.vm_disable_optimization="Disable Optimization" ide.debug_menu.vm_disable_optimization.vm_disable_opt_default="Default Optimization" ide.debug_menu.vm_disable_optimization.vm_disable_opt_proj="No Project  Optimization" ide.debug_menu.vm_disable_opt_proj.vm_disable_opt_project="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_optimization.vm_disable_opt_proj_libs="No Project + Libraries Optimization" ide.debug_menu.vm_disable_opt_proj_libs.vm_disable_opt_project="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_opt_proj_libs.vm_disable_opt_libraries="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_optimization.vm_disable_opt_all="No Optimization" ide.meta_vm_disable_opt_all.sentence="Disable compiler optimization for all sources:- Project, Library and Platform." ide.meta_vm_disable_opt_all.comment="After switching between 'No Optimization' and other optimization values, please click &quot;Solution Clean&quot; or switch off (or cycle) 'vMicro&gt;Compiler&gt;Shared Cache For Cores'. NOTE: Changing optimization settings can cause build errors or result in overly large programs." ide.debug_menu.vm_disable_opt_all.vm_disable_opt_project="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_opt_all.vm_disable_opt_libraries="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_opt_all.vm_disable_opt_core="{ide.compiler_flags_no_opt}" ide.appid="arduino16x" location.sketchbook="C:\Users\Michael\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" build.core.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" vm.runtime.compiler.cached_cores_path="C:\Users\Michael\AppData\Local\Temp\VMBCore\arduino16x" vm.runtime.compiler.showwarnings="false" vm.runtime.compiler.showwarnings_core="false" vm.runtime.compiler.showwarnings_library="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" runtime.vm.ide.platforms.path="c:\program files\microsoft visual studio\2022\preview\common7\ide\extensions\kce0oyko.t4k\Micro Platforms" runtime.vm.ide.tools.openocd.path="{runtime.tools.openocd-0.9.0.path}" runtime.vm.openocd.path="{runtime.tools.openocd-0.9.0.path}" vm.runtime.build.intermediate_output_path="D:\Dev\Arduino\ArduinoBluetoothCmdTests\Release\" vm.runtime.build.final_output_path="D:\Dev\Arduino\FirstArduinoProject\Release\" compiler.always_include_sketchfolder="true" compiler.always_include_sharedprojectfolders="true" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_shallow="true" vm.runtime.compiler.allow_library_debugging="false" vm.sketch_ino_cpp_name="ArduinoBluetoothCmdTests.cpp" serial.port.file="COM8" serial.port="COM8" serial.port.num="8" port.caption="COM8   - Arduino Uno" Caption="Arduino Uno (COM8)" ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" CompatibleID.value0="USB\Class_02" ConfigManagerErrorCode="0" ConfigManagerUserConfig="False" CreationClassName="Win32_PnPEntity" Description="Arduino Uno" DeviceID="USB\VID_2341&amp;PID_0043\95730333737351800251" HardwareID.value0="USB\VID_2341&amp;PID_0043" Manufacturer="Arduino LLC (www.arduino.cc)" Name="Arduino Uno (COM8)" PNPClass="Ports" PNPDeviceID="USB\VID_2341&amp;PID_0043\95730333737351800251" Present="True" Service="usbser" Status="OK" SystemCreationClassName="Win32_ComputerSystem" SystemName="MICHAEL-RED" vid="0x2341" pid="0x0043" vidpid="23410043" vid_pid="0x2341_0x0043" iserial="95730333737351800251" extra.time.local="1635517217" extra.time.utc="1635528017" extra.time.dst="-10800" extra.time.zone="10800" serial.port.caption="COM8   - Arduino Uno" serial.Caption="Arduino Uno (COM8)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="Arduino Uno" serial.DeviceID="USB\VID_2341&amp;PID_0043\95730333737351800251" serial.HardwareID.value0="USB\VID_2341&amp;PID_0043" serial.Manufacturer="Arduino LLC (www.arduino.cc)" serial.Name="Arduino Uno (COM8)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_2341&amp;PID_0043\95730333737351800251" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="MICHAEL-RED" serial.vid="0x2341" serial.pid="0x0043" serial.vidpid="23410043" serial.vid_pid="0x2341_0x0043" serial.iserial="95730333737351800251" serial.port.iserial="95730333737351800251" build.project_name="ArduinoBluetoothCmdTests.ino" build.project_path="D:\Dev\Arduino\ArduinoBluetoothCmdTests" sketch_path="D:\Dev\Arduino\ArduinoBluetoothCmdTests" ProjectDir="D:\Dev\Arduino\ArduinoBluetoothCmdTests\" build.path="C:\Users\Michael\AppData\Local\Temp\VMBuilds\ArduinoBluetoothCmdTests\uno\Release" debug.tool="universal" vm.runtime.compile.skip_library_file_if_exists_in_project="false" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\Michael\AppData\Local\Temp\VMBuilds\ArduinoBluetoothCmdTests\uno\Release" build.architecture="7.3.0-atmel3.6.1-arduino5" vmresolved.compiler.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5\bin\" vmresolved.tools.path="C:\Users\Michael\AppData\Local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino5" build.variant.vmresolved.name="standard" build.variant.vmresolved.full_path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" />
    </Platform>
    <Debug EnableBreak="0" DebugEnabled="1" BandWidthThrottleEnabled="0" InBreakLiveView="1" PerfStats="1" IsGdb="0" RuntimeWriterMissingSetup="0" RuntimeWriterMissingLoop="0" RemotePortSpeedWrittenToDebugSource="115200" RuntimeWriterFoundSetupStart="1" RuntimeWriterFoundLoopStart="1" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="BLELocalCharacteristic.cpp, line 46" Id="5948d079-9d4e-4b51-8a58-6064ae075054" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\michael\documents\arduino\libraries\arduinoble-pairing\src\local\blelocalcharacteristic.cpp" FileLine="46" FileColumn="1" FunctionName="BLELocalCharacteristic(const char* uuid, uint16_t permissions, int valueSize, bool fixedLength)" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5948d079-9d4e-4b51-8a58-6064ae075054'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>39	  _broadcast(false),
40	  _written(false),
41	  _cccdValue(0x0000),
42	  _permissions((uint8_t)((permissions&amp;0xFF00)&gt;&gt;8))
43	{
44	  memset(_eventHandlers, 0x00, sizeof(_eventHandlers));
45	
--&gt;46	  if (permissions &amp; (BLENotify | BLEIndicate)) {
47	
48	      // Set Notify and Inidicate bits for the Client Characteristic Config Descriptor
49	      if (permissions &amp; BLENotify) {
50	        _cccdValue = _cccdValue ^ 0x0001;
51	      }
52	      if (permissions &amp; BLEIndicate) {
53	          _cccdValue = _cccdValue ^ 0x0002;
54	      }
55	
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="DemoArduinoBLEAggregate.ino, line 115" Id="bd9cbeec-36b7-4773-a140-a96191d03f17" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobleaggregate\demoarduinobleaggregate.ino" FileLine="115" FileColumn="1" FunctionName="SetupBLE()" FunctionLineOffset="30" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='bd9cbeec-36b7-4773-a140-a96191d03f17'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>108		// since they are all 0 until set with BLE.addService(ioService);
109		CopyHandleToAggregateValue(0, descriptorFormat_Uint8.handle());
110		CopyHandleToAggregateValue(1, descriptorFormat_Uint16.handle());
111		CopyHandleToAggregateValue(2, descriptorFormat_Uint32.handle());
112		descriptorFormat_Aggregate.writeValue(aggFormatHandles, sizeof(aggFormatHandles));
113	
114		BLE.setAdvertisedService(ioService);
--&gt;115		BLE.advertise();
116		Serial.println("BLE started..");
117	}
118	
119	
120	void CopyHandleToAggregateValue(int pos, uint16_t handle) {
121		uint16_t* ptr = (uint16_t*)aggFormatHandles;
122		memcpy(&amp;ptr[pos], &amp;handle, sizeof(uint16_t));
123	
124	}
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="HardwareDebugTest.ino, line 21" Id="c29bd659-728a-4d28-b84f-0e3f8269c285" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\hardwaredebugtest\hardwaredebugtest.ino" FileLine="21" FileColumn="1" FunctionName="loop()" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c29bd659-728a-4d28-b84f-0e3f8269c285'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>14		//debug_init();
15	}
16	
17	// the loop function runs over and over again until power down or reset
18	void loop() {
19	  //breakpoint();
20	
--&gt;21	  x++;
22	}
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="DemoArduinoBT_BinaryMsg.ino, line 213" Id="d90059de-9a0e-40d7-a919-517e24ca2c36" Enabled="1" Message="result={result}  currentPos={currentPos}" MessageTextType="0" PreProcessedMessage="result={0}  currentPos={1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\demoarduinobt_binarymsg.ino" FileLine="213" FileColumn="1" FunctionName="GetRemainingMsgFragment(int available)" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d90059de-9a0e-40d7-a919-517e24ca2c36'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>206	// Get enough bytes to make a completed message and process result
207	void GetRemainingMsgFragment(int available) {
208		if (available &gt;= currentRemaining) {
209			size_t count = btSerial.readBytes(buff + currentPos, currentRemaining);
210			//Serial.print("GetFrag:"); Serial.print(currentRemaining); Serial.print(":"); Serial.println(count);
211			currentPos += count;
212			bool result = MsgHelpers::ValidateMessage(buff, currentPos);
--&gt;213			ResetInBuff();
214		}
215	}
216	
217	#endif // !SECTION_INCOMING_MSGS
218	
219	#ifndef SECTION_CALLBACKS
220	
221	#ifdef DEBUG
222	void ErrCallback(ErrMsg* errMsg) {
</Source>
        <MessageVariables>
          <MessageVariable Name="result" Index="1" />
          <MessageVariable Name="currentPos" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="MessageHelpers.cpp, line 140" Id="38ad9c5e-ac85-4a80-846d-ca097811a54f" Enabled="1" Message="Invalid start delimiters {errMsg.SOH},{errMsg.STX}" MessageTextType="0" PreProcessedMessage="Invalid start delimiters {0},{1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\messagehelpers.cpp" FileLine="140" FileColumn="1" FunctionName="ValidateHeader(uint8_t* buff, uint8_t dataSize)" FunctionLineOffset="18" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='38ad9c5e-ac85-4a80-846d-ca097811a54f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>133	
134		MsgHeader h;
135		memcpy(&amp;h, buff, sizeof(MsgHeader));
136	
137		errMsg.SOH = *(buff + SOH_POS);
138		errMsg.STX = *(buff + STX_POS);
139		if (errMsg.SOH != _SOH || errMsg.STX != _STX) {
--&gt;140			errMsg.Error = err_StartDelimiters;
141			return MsgHelpers::RaiseError(&amp;errMsg);
142		}
143	
144		errMsg.DataType = (MsgDataType)(*(buff + TYPE_POS));
145		// Get size and validate the number against the data type
146		if (!(errMsg.DataType &gt; typeUndefined) &amp;&amp; (errMsg.DataType &lt; typeInvalid)) {
147			errMsg.Error = err_InvalidType;
148			return MsgHelpers::RaiseError(&amp;errMsg);
149		}
</Source>
        <MessageVariables>
          <MessageVariable Name="errMsg.SOH" Index="1" />
          <MessageVariable Name="errMsg.STX" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="MessageHelpers.cpp, line 147" Id="42bf25b9-d091-4c62-b058-5b8745f81810" Enabled="1" Message="Invalid STX" MessageTextType="0" PreProcessedMessage="Invalid STX" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\messagehelpers.cpp" FileLine="147" FileColumn="1" FunctionName="ValidateHeader(uint8_t* buff, uint8_t dataSize)" FunctionLineOffset="25" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='42bf25b9-d091-4c62-b058-5b8745f81810'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>140			errMsg.Error = err_StartDelimiters;
141			return MsgHelpers::RaiseError(&amp;errMsg);
142		}
143	
144		errMsg.DataType = (MsgDataType)(*(buff + TYPE_POS));
145		// Get size and validate the number against the data type
146		if (!(errMsg.DataType &gt; typeUndefined) &amp;&amp; (errMsg.DataType &lt; typeInvalid)) {
--&gt;147			errMsg.Error = err_InvalidType;
148			return MsgHelpers::RaiseError(&amp;errMsg);
149		}
150	
151		errMsg.Size = MsgHelpers::GetSizeFromHeader(buff);
152		if (errMsg.Size == 0) {
153			errMsg.Error = err_InvalidSizeField;
154			return MsgHelpers::RaiseError(&amp;errMsg);
155		}
156	
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="MessageHelpers.cpp, line 153" Id="e7ae3fc0-42d4-49fc-b1c3-968c4da2d434" Enabled="1" Message="Invalid field size {errMsg.Size}" MessageTextType="0" PreProcessedMessage="Invalid field size {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\messagehelpers.cpp" FileLine="153" FileColumn="1" FunctionName="ValidateHeader(uint8_t* buff, uint8_t dataSize)" FunctionLineOffset="31" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='e7ae3fc0-42d4-49fc-b1c3-968c4da2d434'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>146		if (!(errMsg.DataType &gt; typeUndefined) &amp;&amp; (errMsg.DataType &lt; typeInvalid)) {
147			errMsg.Error = err_InvalidType;
148			return MsgHelpers::RaiseError(&amp;errMsg);
149		}
150	
151		errMsg.Size = MsgHelpers::GetSizeFromHeader(buff);
152		if (errMsg.Size == 0) {
--&gt;153			errMsg.Error = err_InvalidSizeField;
154			return MsgHelpers::RaiseError(&amp;errMsg);
155		}
156	
157		errMsg.PayloadSize = GetPayloadSize(errMsg.DataType);
158		errMsg.RequiredSize = MSG_HEADER_SIZE + MSG_FOOTER_SIZE + errMsg.PayloadSize;
159		if (errMsg.Size != errMsg.RequiredSize) {
160			errMsg.Error = err_InvalidPayloadSizeField;
161			return MsgHelpers::RaiseError(&amp;errMsg);
162		}
</Source>
        <MessageVariables>
          <MessageVariable Name="errMsg.Size" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="MessageHelpers.cpp, line 159" Id="7f43a3cb-57fb-4795-aa59-1223f5ca5182" Enabled="1" Message="Header + Footer + payload &gt; Payload Size = {errMsg.PayloadSize} Size={errMsg.Size}" MessageTextType="0" PreProcessedMessage="Header + Footer + payload &gt; Payload Size = {0} Size={1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\messagehelpers.cpp" FileLine="159" FileColumn="1" FunctionName="ValidateHeader(uint8_t* buff, uint8_t dataSize)" FunctionLineOffset="37" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='7f43a3cb-57fb-4795-aa59-1223f5ca5182'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>152		if (errMsg.Size == 0) {
153			errMsg.Error = err_InvalidSizeField;
154			return MsgHelpers::RaiseError(&amp;errMsg);
155		}
156	
157		errMsg.PayloadSize = GetPayloadSize(errMsg.DataType);
158		errMsg.RequiredSize = MSG_HEADER_SIZE + MSG_FOOTER_SIZE + errMsg.PayloadSize;
--&gt;159		if (errMsg.Size != errMsg.RequiredSize) {
160			errMsg.Error = err_InvalidPayloadSizeField;
161			return MsgHelpers::RaiseError(&amp;errMsg);
162		}
163	
164		errMsg.Id = MsgHelpers::GetIdFromHeader(buff);
165		// validate id and expected data type
166		for (int i = 0; i &lt; MsgHelpers::currentIdListNextPos; i++) {
167			// Found registered ID
168			if (MsgHelpers::inMsgIds[i][0] == errMsg.Id) {
</Source>
        <MessageVariables>
          <MessageVariable Name="errMsg.PayloadSize" Index="1" />
          <MessageVariable Name="errMsg.Size" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="9" Name="MessageHelpers.cpp, line 173" Id="a4725cb1-70bf-4dc0-bb5a-64d8ae8e0481" Enabled="1" Message="Invalid Type {errMsg.DataType} for ID {errMsg.Id}" MessageTextType="0" PreProcessedMessage="Invalid Type {0} for ID {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\messagehelpers.cpp" FileLine="173" FileColumn="1" FunctionName="ValidateHeader(uint8_t* buff, uint8_t dataSize)" FunctionLineOffset="51" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='a4725cb1-70bf-4dc0-bb5a-64d8ae8e0481'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>166		for (int i = 0; i &lt; MsgHelpers::currentIdListNextPos; i++) {
167			// Found registered ID
168			if (MsgHelpers::inMsgIds[i][0] == errMsg.Id) {
169				if (MsgHelpers::inMsgIds[i][1] == errMsg.DataType) {
170					return true;
171				}
172				// Msg data type not same as registered for ID
--&gt;173				errMsg.Error = err_InvalidDataTypeForRegisteredId;
174				return MsgHelpers::RaiseError(&amp;errMsg);
175			}
176		}
177	
178		errMsg.Error = err_CallbackNotRegisteredForId;
179		return MsgHelpers::RaiseError(&amp;errMsg);
180	#else
181		// TODO - look at registering a simple error return with err type?
182		if (dataSize &lt; MSG_HEADER_SIZE) {
</Source>
        <MessageVariables>
          <MessageVariable Name="errMsg.DataType" Index="1" />
          <MessageVariable Name="errMsg.Id" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="10" Name="MessageHelpers.cpp, line 178" Id="ab43ee6a-55a3-4271-a4e1-103f94e88fa1" Enabled="1" Message="Callback not registered for ID {errMsg.Id}" MessageTextType="0" PreProcessedMessage="Callback not registered for ID {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\messagehelpers.cpp" FileLine="178" FileColumn="1" FunctionName="ValidateHeader(uint8_t* buff, uint8_t dataSize)" FunctionLineOffset="56" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ab43ee6a-55a3-4271-a4e1-103f94e88fa1'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>171				}
172				// Msg data type not same as registered for ID
173				errMsg.Error = err_InvalidDataTypeForRegisteredId;
174				return MsgHelpers::RaiseError(&amp;errMsg);
175			}
176		}
177	
--&gt;178		errMsg.Error = err_CallbackNotRegisteredForId;
179		return MsgHelpers::RaiseError(&amp;errMsg);
180	#else
181		// TODO - look at registering a simple error return with err type?
182		if (dataSize &lt; MSG_HEADER_SIZE) {
183			return false;
184		}
185	
186		if (*(buff + SOH_POS) != _SOH || *(buff + STX_POS) != _STX) {
187			return false;
</Source>
        <MessageVariables>
          <MessageVariable Name="errMsg.Id" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="11" Name="DemoArduinoBT_BinaryMsg.ino, line 179" Id="835243ef-fbef-42f6-97c2-fc50005614a7" Enabled="1" Message="{currentPos}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\demoarduinobt_binarymsg.ino" FileLine="179" FileColumn="1" FunctionName="GetNewMsg(int available)" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='835243ef-fbef-42f6-97c2-fc50005614a7'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>172	}
173	
174	
175	// New message arriving. Don't pick up until the entire header is in BT buffer
176	void GetNewMsg(int available) {
177		if (available &gt;= MSG_HEADER_SIZE) {
178			//Serial.print("GetNewMsg:"); Serial.println(available);
--&gt;179			currentPos = btSerial.readBytes(buff, MSG_HEADER_SIZE);
180			if (MsgHelpers::ValidateHeader(buff, currentPos)) {
181				currentRemaining = (MsgHelpers::GetSizeFromHeader(buff) - MSG_HEADER_SIZE);
182				available = btSerial.available();
183				if (available &gt;= currentRemaining) {
184					GetRemainingMsgFragment(available);
185				}
186			}
187			else {
188	#ifdef DEBUG
</Source>
        <MessageVariables>
          <MessageVariable Name="currentPos" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="12" Name="DemoArduinoBT_BinaryMsg.ino, line 183" Id="ff78da9d-4355-462a-89a5-6d0759beacad" Enabled="1" Message="{available}{currentRemaining}" MessageTextType="2" PreProcessedMessage="{0}{1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\demoarduinobt_binarymsg.ino" FileLine="183" FileColumn="1" FunctionName="GetNewMsg(int available)" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ff78da9d-4355-462a-89a5-6d0759beacad'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>176	void GetNewMsg(int available) {
177		if (available &gt;= MSG_HEADER_SIZE) {
178			//Serial.print("GetNewMsg:"); Serial.println(available);
179			currentPos = btSerial.readBytes(buff, MSG_HEADER_SIZE);
180			if (MsgHelpers::ValidateHeader(buff, currentPos)) {
181				currentRemaining = (MsgHelpers::GetSizeFromHeader(buff) - MSG_HEADER_SIZE);
182				available = btSerial.available();
--&gt;183				if (available &gt;= currentRemaining) {
184					GetRemainingMsgFragment(available);
185				}
186			}
187			else {
188	#ifdef DEBUG
189				Serial.print("GetNewMsgERR- currentPos:"); Serial.println(currentPos);
190				Serial.print("---:");
191				Serial.print(buff[0]); Serial.print(",");
192				Serial.print(buff[1]); Serial.print(",");
</Source>
        <MessageVariables>
          <MessageVariable Name="available" Index="1" />
          <MessageVariable Name="currentRemaining" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="13" Name="DemoArduinoBT_BinaryMsg.ino, line 209" Id="c4f3b4f4-9e11-49ee-9bfb-8f6e41d91c08" Enabled="1" Message="{count}{currentRemaining}{currentPos}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\demoarduinobt_binarymsg.ino" FileLine="209" FileColumn="1" FunctionName="GetRemainingMsgFragment(int available)" FunctionLineOffset="3" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c4f3b4f4-9e11-49ee-9bfb-8f6e41d91c08'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>202		}
203	}
204	
205	
206	// Get enough bytes to make a completed message and process result
207	void GetRemainingMsgFragment(int available) {
208		if (available &gt;= currentRemaining) {
--&gt;209			size_t count = btSerial.readBytes(buff + currentPos, currentRemaining);
210			//Serial.print("GetFrag:"); Serial.print(currentRemaining); Serial.print(":"); Serial.println(count);
211			currentPos += count;
212			bool result = MsgHelpers::ValidateMessage(buff, currentPos);
213			ResetInBuff();
214		}
215	}
216	
217	#endif // !SECTION_INCOMING_MSGS
218	
</Source>
        <MessageVariables>
          <MessageVariable Name="count" Index="1" />
          <MessageVariable Name="currentRemaining" Index="2" />
          <MessageVariable Name="currentPos" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="14" Name="DemoArduinoBT_BinaryMsg.ino, line 200" Id="f890eff8-3605-4c23-bc27-1be2b1ef6ec4" Enabled="1" Message="FAILED INITIAL HEAD VAL " MessageTextType="0" PreProcessedMessage="FAILED INITIAL HEAD VAL " Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\demoarduinobt_binarymsg.ino" FileLine="200" FileColumn="1" FunctionName="GetNewMsg(int available)" FunctionLineOffset="25" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f890eff8-3605-4c23-bc27-1be2b1ef6ec4'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>193				Serial.print(buff[2]); Serial.print(",");
194				Serial.print(buff[3]); Serial.print(",");
195				Serial.print(buff[4]); Serial.print(",");
196				Serial.print(buff[5]); Serial.print(",");
197				Serial.print(buff[6]); Serial.print(",");
198				Serial.println(buff[8]);
199	#endif // DEBUG
--&gt;200				PurgeBuffAndBT();
201			}
202		}
203	}
204	
205	
206	// Get enough bytes to make a completed message and process result
207	void GetRemainingMsgFragment(int available) {
208		if (available &gt;= currentRemaining) {
209			size_t count = btSerial.readBytes(buff + currentPos, currentRemaining);
</Source>
      </BreakPoint>
      <BreakPoint Index="15" Name="DemoArduinoBT_BinaryMsg.ino, line 148" Id="9447afa0-4e38-44ca-8840-ed84a51fb3ab" Enabled="1" Message="Stripped bytes {count} of available {available}" MessageTextType="0" PreProcessedMessage="Stripped bytes {0} of available {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\demoarduinobt_binarymsg.ino" FileLine="148" FileColumn="1" FunctionName="PurgeBuffAndBT()" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='9447afa0-4e38-44ca-8840-ed84a51fb3ab'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>141	void PurgeBuffAndBT() {
142		int available = btSerial.available();
143		while (available &gt; 0) {
144			// Iterate through max BUFF size read at a time
145			if (available &gt; IN_BUFF_SIZE) {
146				available = IN_BUFF_SIZE;
147			}
--&gt;148			int count = btSerial.readBytes(buff, available);
149			available = btSerial.available();
150		}
151		ResetInBuff();
152	}
153	
154	#endif // !SECTION_PRIVATE_HELPERS
155	
156	#ifndef SECTION_INCOMING_MSGS
157	
</Source>
        <MessageVariables>
          <MessageVariable Name="count" Index="1" />
          <MessageVariable Name="available" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="16" Name="MessageHelpers.cpp, line 130" Id="4e4d2ee1-a9f0-404d-9531-1933f39b365f" Enabled="1" Message="Invalid size of packet {dataSize}" MessageTextType="0" PreProcessedMessage="Invalid size of packet {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\messagehelpers.cpp" FileLine="130" FileColumn="1" FunctionName="ValidateHeader(uint8_t* buff, uint8_t dataSize)" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4e4d2ee1-a9f0-404d-9531-1933f39b365f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>123	bool MsgHelpers::ValidateHeader(uint8_t* buff, uint8_t dataSize) {
124	
125	#ifdef DEBUG
126		MsgHelpers::errMsg.Init();
127	
128		if (dataSize &lt; MSG_HEADER_SIZE) {
129			MsgHelpers::errMsg.Size = 0;
--&gt;130			MsgHelpers::errMsg.Error = err_InvalidHeaderSize;
131			return MsgHelpers::RaiseError(&amp;errMsg);
132		}
133	
134		MsgHeader h;
135		memcpy(&amp;h, buff, sizeof(MsgHeader));
136	
137		errMsg.SOH = *(buff + SOH_POS);
138		errMsg.STX = *(buff + STX_POS);
139		if (errMsg.SOH != _SOH || errMsg.STX != _STX) {
</Source>
        <MessageVariables>
          <MessageVariable Name="dataSize" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="17" Name="DemoArduinoBT_BinaryMsg.ino, line 162" Id="49b9b3f8-4f59-4e36-b32e-4faebea3463d" Enabled="1" Message="{available}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dev\arduino\firstarduinoproject\demoarduinobt_binarymsg\demoarduinobt_binarymsg.ino" FileLine="162" FileColumn="1" FunctionName="ListenForData()" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='49b9b3f8-4f59-4e36-b32e-4faebea3463d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>155	
156	#ifndef SECTION_INCOMING_MSGS
157	
158	void ListenForData() {
159		// Loop through until nothing in buffer to minimize overflow
160		int available = btSerial.available();
161		while (available &gt; 0) {
--&gt;162			available = btSerial.available();
163			if (available &gt; 0) {
164				if (currentPos == 0) {
165					GetNewMsg(available);
166				}
167				else {
168					GetRemainingMsgFragment(available);
169				}
170			}
171		}
</Source>
        <MessageVariables>
          <MessageVariable Name="available" Index="1" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>